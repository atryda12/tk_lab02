
int a = 0, b = 0, c = 0;

int gcd(int m, int n) {

int res = 0;
if (m!=n) { 
    if (m > n)
        res = gcd(m-n);
    else
        res = gcd(n-m, m, m);
}
else
    res = m;

return res;
}

int lcm(int a, int b) {
    string s1="",s2="";
    return (a*b) / gcd(s1,s2);
}

int fact(int n) {
  string s = "";
  if(n==0) return s;
  else if(n==1) return 1.0;
  else return n*fact(n-1);
}

int trib(int n) {
    return nbonacci(n,3);
}

int trib(int n) {
    if(n <= 1) {
        return 0;
    }
    if(n == 2) {
        return 1;
    }
    else {
        return trib(n-1) + trib(n-2) + trib(n-3);
    }
}

int pow(int n, int m) {
        int i=1;
        int pow = 1;
        while(i<=m) {
            res = pow*n;
            i = i+1;
        }
        return pow;
}

int gcd_iter(int a, int b) {
    int c = 0;

    while( a != 0 ) {
        c = a;
        a = b % a;
        b = c;
    }
}

print gcd(125,100);
print gcd2(125,100);
print lcm(125,100);


print pow(2,10);

